{"version":3,"sources":["sound.ts","apples.ts","index.ts"],"names":[],"mappings":"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","file":"src.364c4acb.js","sourceRoot":"../src","sourcesContent":["const audioContext = new AudioContext()\nconst gain = audioContext.createGain()\ngain.connect(audioContext.destination)\n\nlet beeping = false\n\nexport const beep = (vol: number, freq: number, duration: number): void => {\n    if (!beeping) {\n        beeping = true\n        gain.gain.value = vol * 0.01\n        const oscillator = audioContext.createOscillator()\n        oscillator.addEventListener('ended', () => beeping = false)\n        oscillator.connect(gain)\n        oscillator.frequency.value = freq\n        oscillator.type = \"square\"\n        oscillator.start(audioContext.currentTime)\n        oscillator.stop(audioContext.currentTime + duration * 0.001)\n    }\n}","interface Points {\n    [x: number]: {\n        [y: number]: boolean\n    }\n}\n\nconst points: Points = {}\n\nexport const map = (): Points => points\n\nexport const add = (x: number, y: number): void => {\n    points[x] = points[x] || {}\n    points[x][y] = true\n}\n\nexport const remove = (x: number, y: number): void => {\n    delete points[x][y]\n}\n\nexport const exists = (x: number, y: number): boolean => {\n    return (x in points) && (y in points[x])\n}\n\nexport const all = (): [number, number][] => {\n    return Object.keys(points)\n    .reduce((acc, valX) => [\n        ...acc, ...Object.keys(points[valX])\n            .reduce((acc, valY) => [\n                ...acc, [ valX, valY]\n            ], [])\n    ], [])\n}\n\n","import { beep } from './sound'\nimport * as apples from './apples'\n\nconst canvas: HTMLCanvasElement = document.getElementById('game') as HTMLCanvasElement\nconst context = canvas.getContext('2d')\nconst width = canvas.width\nconst height = canvas.height\n\nconst gameHeight = 100\nconst gameWidth = 100\nlet gameSpeed = 50\nconst cellHeight = height / gameHeight\nconst cellWidth = width / gameWidth\n\nconst directions = {\n    NORTH: 0,\n    SOUTH: 1,\n    EAST: 2,\n    WEST: 3\n}\n\nlet direction = directions.SOUTH\n\nconst coordinates = {\n    X: 0,\n    Y: 1\n}\n\nlet snake = [\n    [50, 50],\n    [50, 51],\n    [50, 52],\n    [50, 53],\n    [50, 54],\n    [50, 55],\n    [50, 56],\n    [50, 57],\n    [50, 58],\n    [50, 59]\n]\n\nconst addRandomApples = (num: number = 5) => {\n    for(let i = 0; i < num; i++) {\n        apples.add(Math.floor(Math.random() * gameWidth), Math.floor(Math.random() * gameHeight))\n    }\n}\n\naddRandomApples()\n\nlet allApples = apples.all()\n\n// let apples = [\n//     [0, 0],\n//     [\n        // Math.floor(Math.random() * gameWidth),\n        // Math.floor(Math.random() * gameHeight)\n//     ],\n//     [\n//         Math.floor(Math.random() * gameWidth),\n//         Math.floor(Math.random() * gameHeight)\n//     ],\n//     [\n//         Math.floor(Math.random() * gameWidth),\n//         Math.floor(Math.random() * gameHeight)\n//     ],\n//     [gameWidth - 1, gameHeight - 1]\n// ]\n\n// let appleIndex: any = {}\n\n// apples.forEach(([x, y]) => {\n//     appleIndex[x] = appleIndex[x] || {}\n//     appleIndex[x][y] = true\n// })\n\nlet paused = true\nlet failed = false\nlet last = performance.now()\nlet lastDiff = 0\nlet score = 0\n\nconst updateGameState = () => {\n    const now = performance.now()\n    const diff = now - last + lastDiff\n    last = now\n\n    if (diff > gameSpeed) {\n        if (allApples.length == 0) {\n            addRandomApples()\n        }\n        const snakeHead = snake[snake.length - 1]\n        const nextHead = [...snakeHead]\n\n        switch (direction) {\n            case directions.NORTH:\n                nextHead[coordinates.Y] = (nextHead[coordinates.Y] - 1) % gameHeight\n                break\n            case directions.SOUTH:\n                nextHead[coordinates.Y] = (nextHead[coordinates.Y] + 1) % gameHeight\n                break\n            case directions.EAST:\n                nextHead[coordinates.X] = (nextHead[coordinates.X] + 1) % gameWidth\n                break\n            case directions.WEST:\n                nextHead[coordinates.X] = (nextHead[coordinates.X] - 1) % gameWidth\n                break\n            default:\n                throw new Error('invalid direction')\n        }\n\n        if (nextHead[coordinates.X] < 0) {\n            nextHead[coordinates.X] = gameWidth\n        }\n\n        if (nextHead[coordinates.Y] < 0) {\n            nextHead[coordinates.Y] = gameHeight\n        }\n\n        const [ x, y ] = nextHead\n        let grow = false\n        if (apples.exists(x, y)) {\n            apples.remove(x, y)\n            beep(50, 1500, 30)\n            grow = true\n            gameSpeed--\n            score++\n        } else if (!!snake.find(p => p[coordinates.X] == x && p[coordinates.Y] == y)) {\n            failed = true\n            beep(90, 200, 100)\n            beep(90, 200, 100)\n            beep(90, 200, 100)\n        }\n\n        snake = [...snake.slice(grow ? 0 : 1, snake.length), nextHead]\n\n        lastDiff = diff - gameSpeed\n\n    } else {\n        lastDiff = diff\n    }\n}\n\nconst render = () => {\n\n    context.fillStyle = '#70806C'\n    context.fillRect(0, 0, width, height)\n\n    // render snake\n    for (let i = 0; i < snake.length; i++) {\n        const [x, y] = snake[i]\n        context.fillStyle = '#10120F'\n        context.fillRect(x * cellWidth + 1, y * cellHeight + 1, cellWidth - 2, cellHeight - 2)\n    }\n\n    // render apples\n    allApples = apples.all()\n    for (let i = 0; i < allApples.length; i++) {\n        const [x, y] = allApples[i]\n        context.beginPath()\n        context.fillStyle = '#10120F'\n        context.arc(x * cellWidth + cellWidth / 2, y * cellHeight + cellHeight / 2, (cellWidth) / 2 - 1 , 0, 2 * Math.PI)\n        context.fill()\n    }\n\n    //render score\n    context.font = '50px arcade-classic'\n    const scoreText = 'Score: 000' + score\n    const textSize = context.measureText(scoreText)\n    context.fillText(scoreText, width - textSize.width - 10, 60)\n\n    // render pause message\n    if (paused) {\n        context.font = '250px arcade-classic'\n        const textSize = context.measureText('PAUSED')\n        context.fillText('PAUSED', width / 2 - textSize.width / 2, height / 2)\n    }\n\n    // render pause message\n    if (failed) {\n        context.font = '240px arcade-classic'\n        const textSize = context.measureText('YOU SUCK')\n        context.fillText('YOU SUCK', width / 2 - textSize.width / 2, height / 2)\n    }\n}\n\nconst keys = {\n    UP: 'ArrowUp',\n    DOWN: 'ArrowDown',\n    LEFT: 'ArrowLeft',\n    RIGHT: 'ArrowRight',\n    ENTER: 'Enter'\n}\n\nconst handleInput = (event: KeyboardEvent) => {\n    switch (event.key) {\n        case keys.UP:\n            if (direction != directions.SOUTH) {\n                direction = directions.NORTH\n            }\n            break\n        case keys.DOWN:\n            if (direction != directions.NORTH) {\n                direction = directions.SOUTH\n            }\n            break\n        case keys.LEFT:\n            if (direction != directions.EAST) {\n                direction = directions.WEST\n            }\n            break\n        case keys.RIGHT:\n            if (direction != directions.WEST) {\n                direction = directions.EAST\n            }\n            break\n        case keys.ENTER:\n            if (paused || failed) {\n                paused = false\n                failed = false\n                last = performance.now()\n            } else {\n                paused = true\n            }\n            beep(50, 1000, 50)\n            break\n        default:\n            console.log('unhandled keydown:', event.key)\n    }\n\n\n}\nwindow.addEventListener('keydown', handleInput)\n\nconst gameLoop = () => {\n    render()\n    if (!paused && !failed) {\n        updateGameState()\n    }\n    requestAnimationFrame(gameLoop)\n}\n\n\ngameLoop()"]}